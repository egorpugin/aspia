/*
 * Aspia: Remote desktop and file transfer tool.
 * Copyright (C) 2018 Dmitry Chapyshev <dmitry@aspia.ru>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.proto.desktop;

message KeyEvent
{
    // The keyboard (Caps/Num) lock states.
    enum Flags
    {
        UNKNOWN  = 0;
        CAPSLOCK = 1;
        NUMLOCK  = 2;
        PRESSED  = 4;
    }

    uint32 usb_keycode = 1;
    uint32 flags = 2;
}

message PointerEvent
{
    enum ButtonMask
    {
        EMPTY         = 0;
        LEFT_BUTTON   = 1;
        MIDDLE_BUTTON = 2;
        RIGHT_BUTTON  = 4;
        WHEEL_UP      = 8;
        WHEEL_DOWN    = 16;
    }

    uint32 mask = 1; // Button mask.
    int32 x = 2;     // x position.
    int32 y = 3;     // y position.
}

message ClipboardEvent
{
    string mime_type = 1;
    bytes data = 2;
}

message CursorShape
{
    enum Flags
    {
        UNKNOWN     = 0;
        RESET_CACHE = 64;
        CACHE       = 128;
    }

    // We use only the first byte in this field.
    // If bit 7 is set to 1, then bits 0-4 contain the cursor index in the cache.
    // If bit 7 is not set, then the cursor image is received.
    // If bit 6 is set to 1, then the command to reset the contents of the cache
    // is received, and bits 0-4 contain a new cache size.
    // Bit 5 is reserved.
    uint32 flags = 1;

    // Width, height (in screen pixels) of the cursor.
    int32 width  = 2;
    int32 height = 3;

    // X,Y coordinates (relative to upper-left corner) of the cursor hotspot.
    int32 hotspot_x = 4;
    int32 hotspot_y = 5;

    // Cursor pixmap data in 32-bit BGRA format compressed with ZLIB.
    bytes data = 6;
}

message Rect
{
    int32 x = 1;
    int32 y = 2;
    int32 width = 3;
    int32 height = 4;
}

message PixelFormat
{
    uint32 bits_per_pixel = 1;

    uint32 red_max   = 2;
    uint32 green_max = 3;
    uint32 blue_max  = 4;

    uint32 red_shift   = 5;
    uint32 green_shift = 6;
    uint32 blue_shift  = 7;
}

// Identifies how the image was encoded.
enum VideoEncoding
{
    VIDEO_ENCODING_UNKNOWN = 0;
    VIDEO_ENCODING_ZLIB    = 1;
    VIDEO_ENCODING_VP8     = 2;
    VIDEO_ENCODING_VP9     = 4; // LossLess
}

message Size
{
    int32 width = 1;
    int32 height = 2;
}

message VideoPacketFormat
{
    Size screen_size         = 1;
    PixelFormat pixel_format = 2;
}

message VideoPacket
{
    VideoEncoding encoding = 1;

    // If the screen size or the pixel format has changed, the field must be filled.
    VideoPacketFormat format = 2;

    // The list of changed rectangles (areas) of the screen.
    repeated Rect dirty_rect = 3;

    // Video packet data.
    bytes data = 4;
}

enum Feature
{
    FEATURE_NONE         = 0;
    FEATURE_CURSOR_SHAPE = 1;
    FEATURE_CLIPBOARD    = 2;
}

message ConfigRequest
{
    uint32 video_encodings = 1;
    uint32 features = 2;
}

message Config
{
    uint32 features              = 1;
    VideoEncoding video_encoding = 2;
    PixelFormat pixel_format     = 3;
    uint32 update_interval       = 4;
    uint32 compress_ratio        = 5;
}

message HostToClient
{
    VideoPacket video_packet       = 1;
    CursorShape cursor_shape       = 2;
    ClipboardEvent clipboard_event = 3;
    ConfigRequest config_request   = 4;
}

message ClientToHost
{
    PointerEvent pointer_event     = 1;
    KeyEvent key_event             = 2;
    ClipboardEvent clipboard_event = 3;
    Config config                  = 4;
}
