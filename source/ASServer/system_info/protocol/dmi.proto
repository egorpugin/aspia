//
// PROJECT:         Aspia
// FILE:            system_info/protocol/dmi.proto
// LICENSE:         GNU General Public License 3
// PROGRAMMERS:     Dmitry Chapyshev (dmitry@aspia.ru)
//

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package aspia.system_info.dmi;

message Bios
{
    message Characteristics
    {
        bool isa                         = 1;
        bool mca                         = 2;
        bool eisa                        = 3;
        bool pci                         = 4;
        bool pc_card                     = 5;
        bool pnp                         = 6;
        bool apm                         = 7;
        bool bios_upgradeable            = 8;
        bool bios_shadowing              = 9;
        bool vlb                         = 10;
        bool escd                        = 11;
        bool boot_from_cd                = 12;
        bool selectable_boot             = 13;
        bool socketed_boot_rom           = 14;
        bool boot_from_pc_card           = 15;
        bool edd                         = 16;
        bool japanese_floppy_for_nec9800 = 17;
        bool japanese_floppy_for_toshiba = 18;
        bool floppy_525_360kb            = 19;
        bool floppy_525_12mb             = 20;
        bool floppy_35_720kb             = 21;
        bool floppy_35_288mb             = 22;
        bool print_screen                = 23;
        bool keyboard_8042               = 24;
        bool serial                      = 25;
        bool printer                     = 26;
        bool cga_video                   = 27;
        bool nec_pc98                    = 28;
        bool acpi                        = 29;
        bool usb_legacy                  = 30;
        bool agp                         = 31;
        bool i2o_boot                    = 32;
        bool ls120_boot                  = 33;
        bool atapi_zip_drive_boot        = 34;
        bool ieee1394_boot               = 35;
        bool smart_battery               = 36;
        bool bios_boot_specification     = 37;
        bool key_init_network_boot       = 38;
        bool targeted_content_distrib    = 39;
        bool uefi                        = 40;
        bool virtual_machine             = 41;
    }

    string manufacturer             = 1;
    string version                  = 2;
    string date                     = 3;
    uint64 size                     = 4;
    string bios_revision            = 5;
    string firmware_revision        = 6;
    string address                  = 7;
    uint64 runtime_size             = 8;
    Characteristics characteristics = 9;
}

message Cache
{
    enum Location
    {
        LOCATION_UNKNOWN  = 0;
        LOCATION_INTERNAL = 1;
        LOCATION_EXTERNAL = 2;
        LOCATION_RESERVED = 3;
    }

    enum Status
    {
        STATUS_UNKNOWN  = 0;
        STATUS_ENABLED  = 1;
        STATUS_DISABLED = 2;
    }

    enum Mode
    {
        MODE_UNKNOWN                   = 0;
        MODE_WRITE_THRU                = 1;
        MODE_WRITE_BACK                = 2;
        MODE_WRITE_WITH_MEMORY_ADDRESS = 3;
    }

    enum SRAMType
    {
        SRAM_TYPE_BAD            = 0;
        SRAM_TYPE_OTHER          = 1;
        SRAM_TYPE_UNKNOWN        = 2;
        SRAM_TYPE_NON_BURST      = 4;
        SRAM_TYPE_BURST          = 8;
        SRAM_TYPE_PIPELINE_BURST = 16;
        SRAM_TYPE_SYNCHRONOUS    = 32;
        SRAM_TYPE_ASYNCHRONOUS   = 64;
    }

    enum ErrorCorrectionType
    {
        ERROR_CORRECTION_TYPE_UNKNOWN        = 0;
        ERROR_CORRECTION_TYPE_OTHER          = 1;
        ERROR_CORRECTION_TYPE_NONE           = 2;
        ERROR_CORRECTION_TYPE_PARITY         = 3;
        ERROR_CORRECTION_TYPE_SINGLE_BIT_ECC = 4;
        ERROR_CORRECTION_TYPE_MULTI_BIT_ECC  = 5;
    }

    enum Type
    {
        TYPE_UNKNOWN     = 0;
        TYPE_OTHER       = 1;
        TYPE_INSTRUCTION = 2;
        TYPE_DATA        = 3;
        TYPE_UNIFIED     = 4;
    }

    enum Associativity
    {
        ASSOCIATIVITY_UNKNOWN       = 0;
        ASSOCIATIVITY_OTHER         = 1;
        ASSOCIATIVITY_DIRECT_MAPPED = 2;
        ASSOCIATIVITY_2_WAY         = 3;
        ASSOCIATIVITY_4_WAY         = 4;
        ASSOCIATIVITY_FULLY         = 5;
        ASSOCIATIVITY_8_WAY         = 6;
        ASSOCIATIVITY_16_WAY        = 7;
        ASSOCIATIVITY_12_WAY        = 8;
        ASSOCIATIVITY_24_WAY        = 9;
        ASSOCIATIVITY_32_WAY        = 10;
        ASSOCIATIVITY_48_WAY        = 11;
        ASSOCIATIVITY_64_WAY        = 12;
        ASSOCIATIVITY_20_WAY        = 13;
    }

    string name                               = 1;
    Location location                         = 2;
    Status status                             = 3;
    Mode mode                                 = 4;
    int32 level                               = 5;
    int32 maximum_size                        = 6;
    int32 current_size                        = 7;
    uint32 supported_sram_types               = 8;
    SRAMType current_sram_type                = 9;
    int32 speed                               = 10;
    ErrorCorrectionType error_correction_type = 11;
    Type type                                 = 12;
    Associativity associativity               = 13;
}

message Chassis
{
    enum Type
    {
        TYPE_UNKNOWN               = 0;
        TYPE_OTHER                 = 1;
        TYPE_DESKTOP               = 2;
        TYPE_LOW_PROFILE_DESKTOP   = 3;
        TYPE_PIZZA_BOX             = 4;
        TYPE_MINI_TOWER            = 5;
        TYPE_TOWER                 = 6;
        TYPE_PORTABLE              = 7;
        TYPE_LAPTOP                = 8;
        TYPE_NOTEBOOK              = 9;
        TYPE_HAND_HELD             = 10;
        TYPE_DOCKING_STATION       = 11;
        TYPE_ALL_IN_ONE            = 12;
        TYPE_SUB_NOTEBOOK          = 13;
        TYPE_SPACE_SAVING          = 14;
        TYPE_LUNCH_BOX             = 15;
        TYPE_MAIN_SERVER_CHASSIS   = 16;
        TYPE_EXPANSION_CHASSIS     = 17;
        TYPE_SUB_CHASSIS           = 18;
        TYPE_BUS_EXPANSION_CHASSIS = 19;
        TYPE_PERIPHERIAL_CHASSIS   = 20;
        TYPE_RAID_CHASSIS          = 21;
        TYPE_RACK_MOUNT_CHASSIS    = 22;
        TYPE_SEALED_CASE_PC        = 23;
        TYPE_MULTI_SYSTEM_CHASSIS  = 24;
        TYPE_COMPACT_PCI           = 25;
        TYPE_ADVANCED_TCA          = 26;
        TYPE_BLADE                 = 27;
        TYPE_BLADE_ENCLOSURE       = 28;
    }

    enum Status
    {
        STATUS_UNKNOWN         = 0;
        STATUS_OTHER           = 1;
        STATUS_SAFE            = 2;
        STATUS_WARNING         = 3;
        STATUS_CRITICAL        = 4;
        STATUS_NON_RECOVERABLE = 5;
    }

    enum SecurityStatus
    {
        SECURITY_STATUS_UNKNOWN                       = 0;
        SECURITY_STATUS_OTHER                         = 1;
        SECURITY_STATUS_NONE                          = 2;
        SECURITY_STATUS_EXTERNAL_INTERFACE_LOCKED_OUT = 3;
        SECURITY_STATUS_EXTERNAL_INTERFACE_ENABLED    = 4;
    }

    string manufacturer            = 1;
    string version                 = 2;
    string serial_number           = 3;
    string asset_tag               = 4;
    Type type                      = 5;
    Status os_load_status          = 6;
    Status power_source_status     = 7;
    Status temparature_status      = 8;
    SecurityStatus security_status = 9;
    int32 height                   = 10;
    int32 number_of_power_cords    = 11;
}

message MemoryDevice
{
    string device_locator  = 1;
    uint64 size            = 2;
    string type            = 3;
    int32 speed            = 4;
    string form_factor     = 5;
    string serial_number   = 6;
    string part_number     = 7;
    string manufactorer    = 8;
    string bank            = 9;
    int32 total_width      = 10;
    int32 data_width       = 11;
}

message OnBoardDevice
{
    enum Type
    {
        TYPE_UNKNOWN         = 0;
        TYPE_OTHER           = 1;
        TYPE_VIDEO           = 2;
        TYPE_SCSI_CONTROLLER = 3;
        TYPE_ETHERNET        = 4;
        TYPE_TOKEN_RING      = 5;
        TYPE_SOUND           = 6;
        TYPE_PATA_CONTROLLER = 7;
        TYPE_SATA_CONTROLLER = 8;
        TYPE_SAS_CONTROLLER  = 9;
    }

    string description = 1;
    Type type          = 2;
    bool enabled       = 3;
}

message PointingDevice
{
    enum Type
    {
        TYPE_UNKNOWN        = 0;
        TYPE_OTHER          = 1;
        TYPE_MOUSE          = 2;
        TYPE_TRACK_BALL     = 3;
        TYPE_TRACK_POINT    = 4;
        TYPE_GLIDE_POINT    = 5;
        TYPE_TOUCH_PAD      = 6;
        TYPE_TOUCH_SCREEN   = 7;
        TYPE_OPTICAL_SENSOR = 8;
    }

    enum Interface
    {
        INTERFACE_UNKNOWN             = 0;
        INTERFACE_OTHER               = 1;
        INTERFACE_SERIAL              = 2;
        INTERFACE_PS_2                = 3;
        INTERFACE_INFRARED            = 4;
        INTERFACE_HP_HIL              = 5;
        INTERFACE_BUS_MOUSE           = 6;
        INTERFACE_ADB                 = 7;
        INTERFACE_BUS_MOUSE_DB_9      = 8;
        INTERFACE_BUS_MOUSE_MICRO_DIN = 9;
        INTERFACE_USB                 = 10;
    }

    Type device_type           = 1;
    Interface device_interface = 2;
    int32 button_count         = 3;
}

message PortConnector
{
    string internal_designation    = 1;
    string external_designation    = 2;
    string type                    = 3;
    string internal_connector_type = 4;
    string external_connector_type = 5;
}

message PortableBattery
{
    enum Chemistry
    {
        CHEMISTRY_UNKNOWN              = 0;
        CHEMISTRY_OTHER                = 1;
        CHEMISTRY_LEAD_ACID            = 2;
        CHEMISTRY_NICKEL_CADMIUM       = 3;
        CHEMISTRY_NICKEL_METAL_HYDRIDE = 4;
        CHEMISTRY_LITHIUM_ION          = 5;
        CHEMISTRY_ZINC_AIR             = 6;
        CHEMISTRY_LITHIUM_POLYMER      = 7;
    }

    string location                 = 1;
    string manufacturer             = 2;
    string manufacture_date         = 3;
    string serial_number            = 4;
    string device_name              = 5;
    Chemistry chemistry             = 6;
    int32 design_capacity           = 7;
    int32 design_voltage            = 8;
    string sbds_version_number      = 9;
    int32 max_error_in_battery_data = 10;
    string sbds_serial_number       = 11;
    string sbds_manufacture_date    = 12;
    string sbds_device_chemistry    = 13;
}

message Processor
{
    enum Type
    {
        TYPE_UNKNOWN           = 0;
        TYPE_OTHER             = 1;
        TYPE_CENTRAL_PROCESSOR = 2;
        TYPE_MATH_PROCESSOR    = 3;
        TYPE_DSP_PROCESSOR     = 4;
        TYPE_VIDEO_PROCESSOR   = 5;
    }

    enum Status
    {
        STATUS_UNKNOWN          = 0;
        STATUS_ENABLED          = 1;
        STATUS_DISABLED_BY_USER = 2;
        STATUS_DISABLED_BY_BIOS = 3;
        STATUS_IDLE             = 4;
        STATUS_OTHER            = 5;
    }

    enum Characteristics
    {
        CHARACTERISTIC_NONE                    = 0;
        CHARACTERISTIC_64BIT_CAPABLE           = 1;
        CHARACTERISTIC_MULTI_CORE              = 2;
        CHARACTERISTIC_HARDWARE_THREAD         = 4;
        CHARACTERISTIC_EXECUTE_PROTECTION      = 8;
        CHARACTERISTIC_ENHANCED_VIRTUALIZATION = 16;
        CHARACTERISTIC_POWER_CONTROL           = 32;
    }

    string manufacturer      = 1;
    string version           = 2;
    string family            = 3;
    Type type                = 4;
    Status status            = 5;
    string socket            = 6;
    string upgrade           = 7;
    int32 external_clock     = 8;
    int32 current_speed      = 9;
    int32 maximum_speed      = 10;
    double voltage           = 11;
    string serial_number     = 12;
    string asset_tag         = 13;
    string part_number       = 14;
    int32 core_count         = 15;
    int32 core_enabled       = 16;
    int32 thread_count       = 17;
    uint32 characteristics   = 18;
}

message System
{
    enum WakeupType
    {
        WAKEUP_TYPE_UNKNOWN           = 0;
        WAKEUP_TYPE_OTHER             = 1;
        WAKEUP_TYPE_APM_TIMER         = 2;
        WAKEUP_TYPE_MODEM_RING        = 3;
        WAKEUP_TYPE_LAN_REMOTE        = 4;
        WAKEUP_TYPE_POWER_SWITCH      = 5;
        WAKEUP_TYPE_PCI_PME           = 6;
        WAKEUP_TYPE_AC_POWER_RESTORED = 7;
    }

    string manufacturer    = 1;
    string product_name    = 2;
    string version         = 3;
    string serial_number   = 4;
    string uuid            = 5;
    WakeupType wakeup_type = 6;
    string sku_number      = 7;
    string family          = 8;
}

message SystemSlot
{
    enum Usage
    {
        USAGE_UNKNOWN   = 0;
        USAGE_OTHER     = 1;
        USAGE_AVAILABLE = 2;
        USAGE_IN_USE    = 3;
    }

    enum BusWidth
    {
        BUS_WIDTH_UNKNOWN = 0;
        BUS_WIDTH_OTHER   = 1;
        BUS_WIDTH_8_BIT   = 2;
        BUS_WIDTH_16_BIT  = 3;
        BUS_WIDTH_32_BIT  = 4;
        BUS_WIDTH_64_BIT  = 5;
        BUS_WIDTH_128_BIT = 6;
        BUS_WIDTH_X1      = 7;
        BUS_WIDTH_X2      = 8;
        BUS_WIDTH_X4      = 9;
        BUS_WIDTH_X8      = 10;
        BUS_WIDTH_X12     = 11;
        BUS_WIDTH_X16     = 12;
        BUS_WIDTH_X32     = 13;
    }

    enum Length
    {
        LENGTH_UNKNOWN = 0;
        LENGTH_OTHER   = 1;
        LENGTH_SHORT   = 2;
        LENGTH_LONG    = 3;
    }

    string slot_designation = 1;
    string type             = 2;
    Usage usage             = 3;
    BusWidth bus_width      = 4;
    Length length           = 5;
}

message Dmi
{
    repeated Bios bios                        = 1;
    repeated Cache cache                      = 2;
    repeated Chassis chassis                  = 3;
    repeated MemoryDevice memory_device       = 4;
    repeated OnBoardDevice onboard_device     = 5;
    repeated PointingDevice pointing_device   = 6;
    repeated PortConnector port_connector     = 7;
    repeated PortableBattery portable_battery = 8;
    repeated Processor processor              = 9;
    repeated System system                    = 10;
    repeated SystemSlot system_slot           = 11;
}
